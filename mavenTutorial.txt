Maven:

1.   Project Identifiers

	Maven uses a set of identifiers, also called coordinates, to uniquely identify a project and specify how the project artifact should be packaged:

	groupId – a unique base name of the company or group that created the project
	artifactId – a unique name of the project
	version – a version of the project
	packaging – a packaging method (e.g. WAR/JAR/ZIP)
	The first three of these (groupId:artifactId:version) combine to form the unique identifier and are the mechanism by which you specify which versions of external libraries (e.g. JARs) your project will use.
	
2. Dependencies:
	These external libraries that a project uses are called dependencies. The dependency management feature in Maven ensures automatic download of those libraries from a central repository, so you don’t have to store them locally.
	
	Transitive Dependencies
		Maven can discover the libraries that are needed by our own dependencies in our pom.xml and includes them automatically. There’s no limit to the number of dependency levels that the libraries are gathered from.

		The conflict here comes when 2 dependencies refer to different versions of a specific artifact. Which one will be included by Maven?

		The answer here is the “nearest definition”. This means that the version used will be the closest one to our project in the tree of dependencies. This is called dependency mediation.

		Let’s see the following example to clarify the dependency mediation:

		1
		A -> B -> C -> D 1.4  and  A -> E -> D 1.0
		This example shows that project A depends on B and E. B and E have their own dependencies which encounter different versions of the D artifact. Artifact D 1.0 will be used in the build of A project because the path through E is shorter.

		There are different techniques to determine which version of the artifacts should be included: https://www.tutorialspoint.com/maven/maven_manage_dependencies

		We can always guarantee a version by declaring it explicitly in our project’s POM. For instance, to guarantee that D 1.4 is used, we should add it explicitly as a dependency in the pom.xml file.
		We can use the Dependency Management section to control artifact versions as we will explain later in this article.
	1. Dependency management: 
		Dependency management is a mechanism for centralizing the dependency information for a muti-module parent project and its children.

		When you have a set of projects or modules that inherit a common parent, you can put all the required information about the dependencies in the common pom.xml file. This will simplify the references to the artifacts in the child POMs.
	2. Dependency mediation
	3. Dependency scope
	4. Excluded dependencies
	5. Optional dependencies
	
3. Repositories:

	A repository in Maven is used to hold build artifacts and dependencies of varying types. The default local repository is located in the .m2/repository folder under the home directory of the user.

	If an artifact or a plug-in is available in the local repository, Maven uses it. Otherwise, it is downloaded from a central repository and stored in the local repository. The default central repository is Maven Central.

	Some libraries, such as JBoss server, are not available at the central repository but are available at an alternate repository. For those libraries, you need to provide the URL to the alternate repository inside pom.xml file:

	<repositories>
		<repository>
			<id>JBoss repository</id>
			<url>http://repository.jboss.org/nexus/content/groups/public/</url>
		</repository>
	</repositories>
	Please note that you can use multiple repositories in your projects.
	
4. Properties
Custom properties can help to make your pom.xml file easier to read and maintain. In the classic use case, you would use custom properties to define versions for your project’s dependencies.

Maven properties are value-placeholders and are accessible anywhere within a pom.xml by using the notation ${name}, where name is the property.


5. Build
The build section is also a very important section of the Maven POM. It provides information about the default Maven goal, the directory for the compiled project, and the final name of the application. The default build section looks like this:

<build>
    <defaultGoal>install</defaultGoal>
    <directory>${basedir}/target</directory>
    <finalName>${artifactId}-${version}</finalName>
    <filters>
      <filter>filters/filter1.properties</filter>
    </filters>
    //...
</build>
The default output folder for compiled artifacts is named target, and the final name of the packaged artifact consists of the artifactId and version, but you can change it at any time.

6. Using Profiles
Another important feature of Maven is its support for profiles. A profile is basically a set of configuration values. By using profiles, you can customize the build for different environments such as Production/Test/Development:

<profiles>
    <profile>
        <id>production</id>
        <build>
            <plugins>
                <plugin>
                //...
                </plugin>
            </plugins>
        </build>
    </profile>
    <profile>
        <id>development</id>
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
        <build>
            <plugins>
                <plugin>
                //...
                </plugin>
            </plugins>
        </build>
     </profile>
 </profiles>
As you can see in the example above, the default profile is set to development. If you want to run the production profile, you can use the following Maven command:

		mvn clean install -Pproduction

7. Maven Build Lifecycles
Every Maven build follows a specified lifecycle. You can execute several build lifecycle goals, including the ones to compile the project’s code, create a package, and install the archive file in the local Maven dependency repository.

	7.1. Lifecycle Phases
	The following list shows the most important Maven lifecycle phases:

	validate – checks the correctness of the project
	compile – compiles the provided source code into binary artifacts
	test – executes unit tests
	package – packages compiled code into an archive file
	integration-test – executes additional tests, which require the packaging
	verify – checks if the package is valid
	install – installs the package file into the local Maven repository
	deploy – deploys the package file to a remote server or repository
	
	7.2 Plugins and Goals
A Maven plugin is a collection of one or more goals. Goals are executed in phases, which helps to determine the order in which the goals are executed.

---------------------------------

https://docs.spring.io/spring-boot/docs/current/reference/html/howto-traditional-deployment.html