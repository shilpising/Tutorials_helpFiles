Google Kubernetes Engine

Kubernetes on Google Cloud Platform
----------------------------------------
When you run a Kubernetes Engine cluster, you also gain the benefit of advanced cluster management features that Google Cloud Platform provides. These include:

Load-balancing for Compute Engine instances.
Node Pools to designate subsets of nodes within a cluster for additional flexibility.
Automatic scaling of your cluster's node instance count.
Automatic upgrades for your cluster's node software.
Node auto-repair to maintain node health and availability.
Logging and Monitoring with Stackdriver for visibility into your cluster.

https://console.cloud.google.com/kubernetes/list?project=watchful-slice-240104
https://hub.docker.com/

----------------------------
dockerFile

# Start with a base image containing Java runtime
FROM openjdk:8-jdk-alpine

# Add Maintainer Info
LABEL maintainer="sshilpi.mca@gmail.com"

# Add a volume pointing to /tmp
VOLUME /tmp

# Make port 8080 available to the world outside this container
EXPOSE 8761

# The application's jar file
ARG JAR_FILE=target/spring-eureka-server-0.0.1-SNAPSHOT.jar

# Add the application's jar to the container
ADD ${JAR_FILE} spring-eureka-server.jar

# Run the jar file 
ENTRYPOINT ["java","-jar","/spring-eureka-server.jar"]
------------------------------------------------------------

Building the Docker image

mvn clean package
docker build -t spring-boot-websocket-chat-demo .
docker image ls
docker run -p 5000:8080 spring-boot-websocket-chat-demo

Pushing the docker image to docker hub

Login with your Docker Id

$ docker login
docker tag spring-boot-websocket-chat-demo callicoder/spring-boot-websocket-chat-demo:0.0.1-SNAPSHOT

Push the image to docker hub

docker push callicoder/spring-boot-websocket-chat-demo:0.0.1-SNAPSHOT
--------------------------------------------------------------------------


1. Initializes cluster master node:

 kubeadm init --apiserver-advertise-address $(hostname -i)


 2. Initialize cluster networking:

 kubectl apply -n kube-system -f \
    "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"


 3. (Optional) Create an nginx deployment:

 kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml
 
 
 
  To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of machines by running the following on each node
as root:

  kubeadm join 192.168.0.12:6443 --token pohgwv.i57frmw27c7j6ksy --discovery-token-ca-cert-hash sha256:875eb8e941656cdc5d66f7cb8c15bf2aa64d6c1854000bce82ef217e35317ebb
  
====================================================================
docker run -p 8761:8761 spring-eureka-server
docker run -p 5007:8080 springboot-zuul-gatwayproxy
docker run -p 5501:9098 spring-eureka-client-school-service
docker run -p 5005:8098 spring-eureka-client-student-service
  